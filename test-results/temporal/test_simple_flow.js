#!/usr/bin/env node

/**
 * ARCHIVO: test_simple_flow.js
 * PROP√ìSITO: Test simple del flujo completo con OCR integrado para documentos que funcionan
 * ESTADO: testing
 * DEPENDENCIAS: Pipeline real de ingesta, OCR implementado en src/lib/pdf
 * OUTPUTS: Verificaci√≥n que todo funciona antes de crear p√°ginas UI de test
 * ACTUALIZADO: 2025-09-18
 */

require('dotenv').config({ path: '.env.local' });
const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');
const path = require('path');

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

// Test solo con documentos que sabemos que tienen texto bueno
const WORKING_DOCUMENTS = {
  'comunicado': {
    name: 'COMUNICADO VECINOS',
    file: 'datos/Comunicado- INFORMACI√ìN RELACIONADA CONTADORES LECTURA DE SUNFLOWER C.P. _AMARA HOMES_.pdf',
    agent: 'comunicado_extractor_v1',
    table: 'extracted_communications'
  }
};

async function testSimpleFlow() {
  console.log('üß™ TEST SIMPLE FLOW - VERIFICACI√ìN PREVIA');
  console.log('='.repeat(50));
  
  try {
    // 1. Verificar que el agente existe
    console.log('üîç Verificando agente comunicado_extractor_v1...');
    const { data: agent, error: agentError } = await supabase
      .from('agents')
      .select('name, purpose, prompt_template')
      .eq('name', 'comunicado_extractor_v1')
      .eq('is_active', true)
      .single();
    
    if (agentError || !agent) {
      console.log('‚ùå Agente no encontrado:', agentError?.message);
      return;
    }
    
    console.log('‚úÖ Agente encontrado:', agent.name);
    console.log('üìù Prop√≥sito:', agent.purpose);
    console.log('üìè Prompt length:', agent.prompt_template.length);
    
    // 2. Verificar que la tabla existe y tiene las columnas correctas
    console.log('\\nüîç Verificando tabla extracted_communications...');
    const { data: tableTest, error: tableError } = await supabase
      .from('extracted_communications')
      .select('*')
      .limit(1);
    
    if (tableError) {
      console.log('‚ùå Error accediendo tabla:', tableError.message);
      return;
    }
    
    console.log('‚úÖ Tabla accesible');
    
    // 3. Verificar que el archivo existe
    const testFile = path.join(process.cwd(), WORKING_DOCUMENTS.comunicado.file);
    if (!fs.existsSync(testFile)) {
      console.log('‚ùå Archivo no encontrado:', testFile);
      return;
    }
    
    console.log('‚úÖ Archivo encontrado');
    console.log('üìä Tama√±o:', (fs.statSync(testFile).size / 1024).toFixed(1), 'KB');
    
    // 4. Test de extracci√≥n b√°sica
    console.log('\\nüìñ Test extracci√≥n b√°sica...');
    const buffer = fs.readFileSync(testFile);
    const pdfParse = require('pdf-parse');
    const pdfData = await pdfParse(buffer);
    
    console.log('üìÑ P√°ginas:', pdfData.numpages);
    console.log('üìÑ Caracteres extra√≠dos:', pdfData.text.length);
    
    if (pdfData.text.length > 100) {
      console.log('‚úÖ Extracci√≥n suficiente para agente');
    } else {
      console.log('‚ö†Ô∏è Texto insuficiente, necesitar√≠a OCR');
    }
    
    console.log('\\nüéØ ESTADO GENERAL:');
    console.log('‚úÖ Agente: LISTO');
    console.log('‚úÖ Tabla: LISTA'); 
    console.log('‚úÖ Archivo: LISTO');
    console.log('‚úÖ Extracci√≥n: FUNCIONANDO');
    
    console.log('\\nüöÄ SIGUIENTE PASO:');
    console.log('1. Ejecutar SQL para corregir constraint document_type');
    console.log('2. Crear p√°gina de test UI para comunicado');
    console.log('3. Hacer test completo con datos reales en UI');
    
  } catch (error) {
    console.error('‚ùå Error en test:', error.message);
  }
}

// Ejecutar test
if (require.main === module) {
  testSimpleFlow().catch(console.error);
}

module.exports = { testSimpleFlow };