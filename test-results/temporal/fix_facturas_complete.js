/**
 * ARCHIVO: fix_facturas_complete.js
 * PROP√ìSITO: Corregir tabla extracted_invoices y agente para campos faltantes de plantilla
 * ESTADO: fixing
 * DEPENDENCIAS: supabase
 * OUTPUTS: SQL para a√±adir campos + prompt actualizado
 * ACTUALIZADO: 2025-09-20
 */

require('dotenv').config({path:'.env.local'});
const { createClient } = require('@supabase/supabase-js');

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

async function fixFacturasComplete() {
  console.log('üîç [FACTURAS FIX] An√°lisis completo de plantilla vs BD vs agente...\n');
  
  // 1. Verificar campos actuales en BD
  console.log('üìã PASO 1: Campos actuales en extracted_invoices:');
  const { data: currentData } = await supabase
    .from('extracted_invoices')
    .select('*')
    .limit(1);
    
  if (currentData && currentData.length > 0) {
    Object.keys(currentData[0]).forEach(field => {
      console.log(`  ‚úÖ ${field}`);
    });
  }
  
  // 2. Campos que faltan seg√∫n la plantilla
  const missingFields = [
    'vendor_phone', 'vendor_email', 'vendor_website',
    'client_phone', 'client_email',
    'issue_date', 'due_date', 
    'subtotal', 'tax_amount', 'total_amount', 'currency',
    'payment_method', 'payment_terms', 'bank_details',
    'products_description', 'products_quantities', 'products_unit_prices',
    'notes'
  ];
  
  console.log('\n‚ùå CAMPOS FALTANTES EN BD:');
  missingFields.forEach(field => {
    console.log(`  - ${field}`);
  });
  
  // 3. SQL para a√±adir campos faltantes
  console.log('\nüõ†Ô∏è PASO 2: SQL para a√±adir campos faltantes:\n');
  
  const addFieldsSQL = `
-- A√±adir campos de contacto del vendedor
ALTER TABLE extracted_invoices 
ADD COLUMN IF NOT EXISTS vendor_phone TEXT,
ADD COLUMN IF NOT EXISTS vendor_email TEXT,
ADD COLUMN IF NOT EXISTS vendor_website TEXT;

-- A√±adir campos de contacto del cliente  
ALTER TABLE extracted_invoices
ADD COLUMN IF NOT EXISTS client_phone TEXT,
ADD COLUMN IF NOT EXISTS client_email TEXT;

-- A√±adir campos de fechas adicionales
ALTER TABLE extracted_invoices
ADD COLUMN IF NOT EXISTS issue_date DATE,
ADD COLUMN IF NOT EXISTS due_date DATE;

-- A√±adir campos de montos adicionales
ALTER TABLE extracted_invoices
ADD COLUMN IF NOT EXISTS subtotal DECIMAL(10,2),
ADD COLUMN IF NOT EXISTS tax_amount DECIMAL(10,2),
ADD COLUMN IF NOT EXISTS total_amount DECIMAL(10,2),
ADD COLUMN IF NOT EXISTS currency TEXT DEFAULT 'EUR';

-- A√±adir campos de pago
ALTER TABLE extracted_invoices
ADD COLUMN IF NOT EXISTS payment_method TEXT,
ADD COLUMN IF NOT EXISTS payment_terms TEXT,
ADD COLUMN IF NOT EXISTS bank_details TEXT;

-- A√±adir campos de productos (JSON arrays)
ALTER TABLE extracted_invoices
ADD COLUMN IF NOT EXISTS products_description JSONB,
ADD COLUMN IF NOT EXISTS products_quantities JSONB,
ADD COLUMN IF NOT EXISTS products_unit_prices JSONB;

-- A√±adir notas
ALTER TABLE extracted_invoices
ADD COLUMN IF NOT EXISTS notes TEXT;

-- Verificar que se a√±adieron correctamente
SELECT column_name, data_type 
FROM information_schema.columns 
WHERE table_name = 'extracted_invoices' 
AND table_schema = 'public'
ORDER BY ordinal_position;
`;

  console.log(addFieldsSQL);
  
  // 4. Nuevo prompt para el agente
  console.log('\nü§ñ PASO 3: Prompt actualizado para agente facturas:\n');
  
  const newPrompt = `Eres un experto en an√°lisis de documentos comerciales especializado en facturas. Analiza el siguiente documento y extrae la informaci√≥n en formato JSON exactamente como se especifica.

DOCUMENTO:
{document_text}

INSTRUCCIONES:
1. Lee todo el documento cuidadosamente
2. Extrae SOLO la informaci√≥n que est√© presente en el documento
3. Si un campo no est√° presente, usar null
4. Para fechas usar formato YYYY-MM-DD
5. Para montos usar solo n√∫meros decimales
6. Para arrays usar formato JSON v√°lido

CAMPOS A EXTRAER:
{
  "provider_name": "nombre completo del proveedor/emisor",
  "client_name": "nombre completo del cliente/receptor",
  "amount": 1250.00,
  "invoice_date": "fecha de la factura (YYYY-MM-DD)",
  "category": "categor√≠a de la factura (servicios, productos, etc.)",
  "invoice_number": "n√∫mero de factura",
  "issue_date": "fecha de emisi√≥n (YYYY-MM-DD)",
  "due_date": "fecha de vencimiento (YYYY-MM-DD)",
  "subtotal": 1033.06,
  "tax_amount": 216.94,
  "total_amount": 1250.00,
  "currency": "EUR",
  "payment_method": "m√©todo de pago",
  "vendor_address": "direcci√≥n completa del vendedor",
  "vendor_tax_id": "NIF/CIF del vendedor",
  "vendor_phone": "tel√©fono del vendedor",
  "vendor_email": "email del vendedor",
  "vendor_website": "sitio web del vendedor",
  "client_address": "direcci√≥n completa del cliente",
  "client_tax_id": "NIF/CIF del cliente",
  "client_phone": "tel√©fono del cliente",
  "client_email": "email del cliente",
  "products": [
    {
      "description": "descripci√≥n del producto/servicio",
      "quantity": 2,
      "unit_price": 125.50,
      "total_price": 251.00
    }
  ],
  "payment_terms": "condiciones de pago",
  "bank_details": "datos bancarios (IBAN, cuenta, etc.)",
  "notes": "observaciones o notas adicionales"
}

IMPORTANTE: Devuelve SOLO el JSON, sin texto adicional.`;

  console.log(newPrompt);
  
  console.log('\nüìù PASO 4: Instrucciones de implementaci√≥n:');
  console.log('1. Ejecuta el SQL en Supabase SQL Editor');
  console.log('2. Actualiza el agente factura_extractor_v2 con el nuevo prompt');
  console.log('3. Actualiza la funci√≥n validateInvoiceData() con los nuevos campos');
  console.log('4. Prueba con un PDF real');
  
  console.log('\n‚úÖ RESULTADO ESPERADO:');
  console.log('- Plantilla mostrar√° tel√©fono y email del vendedor');
  console.log('- Todos los campos de la plantilla estar√°n disponibles');
  console.log('- El agente extraer√° informaci√≥n completa de facturas');
}

fixFacturasComplete().catch(console.error);