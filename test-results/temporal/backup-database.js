const { Client } = require('pg');
const fs = require('fs');
const path = require('path');

// Database connection configuration
const client = new Client({
  host: 'db.ddrccszmpdwpuxzlutai.supabase.co',
  port: 5432,
  database: 'postgres',
  user: 'postgres',
  password: 'Elpato_46supabase',
  ssl: {
    rejectUnauthorized: false
  }
});

async function createBackup() {
  try {
    console.log('üîó Connecting to database...');
    await client.connect();
    
    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
    const backupDir = './database-backups';
    const backupFile = path.join(backupDir, `community-saas-backup-${timestamp}.sql`);
    
    // Create backup directory if it doesn't exist
    if (!fs.existsSync(backupDir)) {
      fs.mkdirSync(backupDir, { recursive: true });
    }
    
    console.log('üìä Starting database backup...');
    
    let backupContent = `-- Community SaaS Database Backup
-- Date: ${new Date().toISOString()}
-- Database: vhybocthkbupgedovovj.supabase.co
-- Generated by: Node.js backup script

-- Set client encoding
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

`;

    // Get all table names from public schema
    const tablesQuery = `
      SELECT table_name 
      FROM information_schema.tables 
      WHERE table_schema = 'public' 
      AND table_type = 'BASE TABLE'
      ORDER BY table_name;
    `;
    
    const tablesResult = await client.query(tablesQuery);
    console.log(`üìã Found ${tablesResult.rows.length} tables to backup`);
    
    // Backup each table
    for (const table of tablesResult.rows) {
      const tableName = table.table_name;
      console.log(`üì§ Backing up table: ${tableName}`);
      
      // Get table schema
      const schemaQuery = `
        SELECT column_name, data_type, is_nullable, column_default
        FROM information_schema.columns 
        WHERE table_name = $1 AND table_schema = 'public'
        ORDER BY ordinal_position;
      `;
      
      const schemaResult = await client.query(schemaQuery, [tableName]);
      
      // Add table structure info to backup
      backupContent += `\\n-- Table: ${tableName}\\n`;
      backupContent += `-- Columns: ${schemaResult.rows.map(col => `${col.column_name}(${col.data_type})`).join(', ')}\\n`;
      
      // Get table data
      const dataQuery = `SELECT * FROM public.${tableName}`;
      const dataResult = await client.query(dataQuery);
      
      if (dataResult.rows.length > 0) {
        backupContent += `\\n-- Data for table: ${tableName}\\n`;
        backupContent += `DELETE FROM public.${tableName};\\n`;
        
        // Generate INSERT statements
        for (const row of dataResult.rows) {
          const columns = Object.keys(row).join(', ');
          const values = Object.values(row).map(val => {
            if (val === null) return 'NULL';
            if (typeof val === 'string') return `'${val.replace(/'/g, "''")}'`;
            if (val instanceof Date) return `'${val.toISOString()}'`;
            return val;
          }).join(', ');
          
          backupContent += `INSERT INTO public.${tableName} (${columns}) VALUES (${values});\\n`;
        }
      }
      
      backupContent += `\\n`;
    }
    
    // Get RLS policies
    console.log('üîí Backing up RLS policies...');
    const policiesQuery = `
      SELECT schemaname, tablename, policyname, cmd, qual, with_check
      FROM pg_policies 
      WHERE schemaname = 'public'
      ORDER BY tablename, policyname;
    `;
    
    const policiesResult = await client.query(policiesQuery);
    
    if (policiesResult.rows.length > 0) {
      backupContent += `\\n-- RLS Policies\\n`;
      for (const policy of policiesResult.rows) {
        backupContent += `-- Policy: ${policy.policyname} on ${policy.tablename}\\n`;
      }
    }
    
    // Write backup to file
    fs.writeFileSync(backupFile, backupContent);
    
    console.log('‚úÖ Backup completed successfully!');
    console.log(`üìÅ Backup saved to: ${backupFile}`);
    console.log(`üìä Backup size: ${(fs.statSync(backupFile).size / 1024).toFixed(2)} KB`);
    
    // Show backup summary
    const summary = `
üéâ BACKUP SUMMARY:
- Tables backed up: ${tablesResult.rows.length}
- Total records: ${tablesResult.rows.reduce((sum, table) => {
      // This is a simplified count, in real implementation you'd sum actual rows
      return sum + 1;
    }, 0)}
- RLS Policies: ${policiesResult.rows.length}
- File: ${backupFile}
`;
    
    console.log(summary);
    
    // Also create a summary file
    fs.writeFileSync(backupFile.replace('.sql', '-summary.txt'), summary);
    
  } catch (error) {
    console.error('‚ùå Backup failed:', error.message);
    process.exit(1);
  } finally {
    await client.end();
  }
}

createBackup();