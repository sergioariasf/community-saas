/**
 * ===============================================================================
 * EXTRACTOR FINAL DE SCHEMA - AUTOMATIZADO
 * ===============================================================================
 * Usa las credenciales correctas para obtener el schema completo
 * Reemplaza el proceso manual: SQL Editor ‚Üí copy/paste ‚Üí an√°lisis
 */

const { createClient } = require('@supabase/supabase-js');
const fs = require('fs');

// Configuraci√≥n (lee de .env.local)
require('dotenv').config({ path: '.env.local' });

const supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL;
const serviceKey = process.env.SUPABASE_SERVICE_ROLE_KEY;

console.log('üîç EXTRACTOR DE SCHEMA - PROCESO AUTOMATIZADO');
console.log('===============================================');
console.log(`üì° URL: ${supabaseUrl}`);
console.log(`üîë Service Key: ${serviceKey ? serviceKey.substring(0, 20) + '...' : 'NOT FOUND'}`);
console.log('');

if (!supabaseUrl || !serviceKey) {
    console.error('‚ùå ERROR: Variables de entorno no encontradas');
    console.error('Verifica que .env.local contenga:');
    console.error('- NEXT_PUBLIC_SUPABASE_URL');
    console.error('- SUPABASE_SERVICE_ROLE_KEY');
    process.exit(1);
}

// Crear cliente con service role (acceso completo)
const supabase = createClient(supabaseUrl, serviceKey);

async function extractFullSchema() {
    console.log('üöÄ Iniciando extracci√≥n completa del schema...');
    console.log('');
    
    const results = [];
    const timestamp = new Date().toISOString();
    
    results.push('===============================================================================');
    results.push('SCHEMA COMPLETO DE SUPABASE - EXTRA√çDO AUTOM√ÅTICAMENTE');
    results.push('===============================================================================');
    results.push(`Fecha: ${timestamp}`);
    results.push(`M√©todo: Supabase JS Client con Service Role`);
    results.push('');
    
    // 1. LISTAR TODAS LAS TABLAS DISPONIBLES
    console.log('üìä 1. Explorando todas las tablas...');
    results.push('üìä 1. TABLAS DISPONIBLES');
    results.push('===============================================');
    
    try {
        // Usar una query directa para listar tablas
        const { data: tables, error } = await supabase
            .from('information_schema.tables')
            .select('table_name')
            .eq('table_schema', 'public')
            .order('table_name');
        
        if (error) {
            // M√©todo alternativo: intentar con tablas conocidas
            console.log('‚ö†Ô∏è M√©todo directo fall√≥, usando tablas conocidas...');
            results.push('‚ö†Ô∏è No se pudo consultar information_schema, usando tablas conocidas:');
            
            const knownTables = ['communities', 'user_roles', 'items', 'private_items'];
            
            for (const tableName of knownTables) {
                console.log(`  üìã Analizando: ${tableName}`);
                await analyzeTable(tableName, results);
            }
            
        } else if (tables && tables.length > 0) {
            console.log(`‚úÖ Encontradas ${tables.length} tablas`);
            results.push(`‚úÖ Total de tablas encontradas: ${tables.length}`);
            results.push('');
            
            for (const table of tables) {
                console.log(`  üìã Analizando: ${table.table_name}`);
                await analyzeTable(table.table_name, results);
            }
        }
        
    } catch (err) {
        console.error('‚ùå Error al listar tablas:', err.message);
        results.push(`‚ùå Error: ${err.message}`);
        
        // Fallback: usar tablas conocidas
        console.log('üîß Usando fallback con tablas conocidas...');
        const knownTables = ['communities', 'user_roles', 'items', 'private_items'];
        
        for (const tableName of knownTables) {
            console.log(`  üìã Analizando: ${tableName}`);
            await analyzeTable(tableName, results);
        }
    }
    
    // Guardar resultados
    const outputFile = 'database_schema_actual.txt';
    const output = results.join('\n');
    
    fs.writeFileSync(outputFile, output);
    console.log('');
    console.log('‚úÖ EXTRACCI√ìN COMPLETADA');
    console.log('===============================================');
    console.log(`üìÑ Archivo generado: ${outputFile}`);
    console.log(`üìè L√≠neas: ${output.split('\n').length}`);
    console.log(`üíΩ Tama√±o: ${(output.length / 1024).toFixed(2)} KB`);
    
    // Mostrar vista previa
    console.log('');
    console.log('üëÄ VISTA PREVIA (primeras 15 l√≠neas):');
    console.log('----------------------------------------');
    console.log(output.split('\n').slice(0, 15).join('\n'));
    console.log('----------------------------------------');
    
    return outputFile;
}

async function analyzeTable(tableName, results) {
    results.push(`üìã TABLA: ${tableName}`);
    results.push('----------------------------------------');
    
    try {
        // Intentar obtener datos de muestra para inferir estructura
        const { data, error, count } = await supabase
            .from(tableName)
            .select('*', { count: 'exact' })
            .limit(1);
        
        if (error) {
            results.push(`‚ùå Error: ${error.message}`);
        } else {
            results.push(`üìä Total registros: ${count || 0}`);
            
            if (data && data.length > 0) {
                const columns = Object.keys(data[0]);
                results.push(`üîë Columnas (${columns.length}): ${columns.join(', ')}`);
                
                // Analizar tipos de datos b√°sicos
                const sample = data[0];
                results.push('üìã An√°lisis de tipos:');
                
                for (const [col, value] of Object.entries(sample)) {
                    const type = value === null ? 'null' : typeof value;
                    const preview = value === null ? 'NULL' : 
                                  typeof value === 'string' && value.length > 50 ? 
                                  value.substring(0, 50) + '...' : 
                                  String(value);
                    results.push(`   ${col}: ${type} (ej: ${preview})`);
                }
                
            } else {
                results.push('‚ö†Ô∏è Tabla vac√≠a - no se pueden inferir columnas');
            }
        }
        
    } catch (err) {
        results.push(`‚ùå Excepci√≥n: ${err.message}`);
    }
    
    results.push('');
}

// Ejecutar extracci√≥n
extractFullSchema()
    .then((outputFile) => {
        console.log('');
        console.log('üéØ PR√ìXIMOS PASOS:');
        console.log(`1. El archivo ${outputFile} est√° listo para Claude Code`);
        console.log(`2. Comando sugerido: Read ${outputFile}`);
        console.log('3. Claude Code puede analizarlo y crear migraciones');
    })
    .catch((error) => {
        console.error('‚ùå ERROR FATAL:', error);
        process.exit(1);
    });