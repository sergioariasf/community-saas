/**
 * ARCHIVO: page.tsx
 * PROP√ìSITO: Vista detallada del documento con informaci√≥n del pipeline progresivo
 * ESTADO: production
 * DEPENDENCIAS: @/components/ui, @/data/anon/documents
 * OUTPUTS: Vista completa del documento con metadatos y estado del pipeline
 * ACTUALIZADO: 2025-09-15
 */
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import {
  Card,
  CardContent,
  CardFooter,
  CardHeader,
} from '@/components/ui/card';
import { Separator } from '@/components/ui/separator';
import { Skeleton } from '@/components/ui/skeleton';
import { T } from '@/components/ui/Typography';
import { getDocument } from '@/data/anon/documents';
import { createSupabaseClient } from '@/supabase-clients/server';
import { 
  ArrowLeft, 
  Calendar, 
  FileText, 
  HardDrive, 
  Clock,
  CheckCircle2,
  AlertCircle,
  Building2,
  User,
  Receipt,
  Hash,
  FileIcon,
  Download,
  Activity,
  BarChart3,
  Eye
} from 'lucide-react';
import Link from 'next/link';
import { notFound } from 'next/navigation';
import { Suspense } from 'react';

// Funci√≥n para obtener metadatos ricos de la tabla document_metadata
async function getDocumentMetadata(documentId: string) {
  try {
    const supabase = await createSupabaseClient();
    const { data, error } = await supabase
      .from('document_metadata')
      .select('*')
      .eq('document_id', documentId)
      .eq('is_current', true)
      .single();

    if (error || !data) {
      console.log('No metadata found in document_metadata table for', documentId);
      return null;
    }

    return data;
  } catch (error) {
    console.error('Error fetching document metadata:', error);
    return null;
  }
}

async function Document({ documentId }: { documentId: string }) {
  try {
    const [result, richMetadata] = await Promise.all([
      getDocument(documentId),
      getDocumentMetadata(documentId)
    ]);
    
    if (!result.success || !result.data) {
      return notFound();
    }

    const document = result.data;

    // Calcular estado general del pipeline progresivo
    const getPipelineStatus = () => {
      const { processing_level, extraction_status, classification_status, metadata_status, chunking_status } = document;
      
      // Verificar si hay errores
      const statuses = [extraction_status, classification_status, metadata_status, chunking_status].filter(Boolean);
      if (statuses.some(s => s === 'failed')) {
        return { status: 'error', text: 'Pipeline con errores', color: 'destructive' };
      }
      
      // Verificar si est√° procesando
      if (statuses.some(s => s === 'processing')) {
        return { status: 'processing', text: 'Procesando pipeline...', color: 'default' };
      }
      
      // Verificar completitud seg√∫n nivel
      const extractionDone = extraction_status === 'completed';
      const classificationOk = processing_level < 2 || classification_status === 'completed';
      const metadataOk = processing_level < 3 || metadata_status === 'completed';
      const chunkingOk = processing_level < 4 || chunking_status === 'completed';
      
      if (extractionDone && classificationOk && metadataOk && chunkingOk) {
        return { status: 'completed', text: `Pipeline Nivel ${processing_level} Completado`, color: 'secondary' };
      }
      
      // En progreso
      return { status: 'processing', text: `Pipeline Nivel ${processing_level} en progreso`, color: 'default' };
    };

    const getStatusIcon = (status: string) => {
      switch (status) {
        case 'processing': return <Clock className="w-4 h-4 text-yellow-500" />;
        case 'completed': return <CheckCircle2 className="w-4 h-4 text-green-500" />;
        case 'error': return <AlertCircle className="w-4 h-4 text-red-500" />;
        default: return <Clock className="w-4 h-4" />;
      }
    };

    const getStatusColor = (status: string) => {
      switch (status) {
        case 'processing': return 'default';
        case 'completed': return 'secondary';
        case 'error': return 'destructive';
        default: return 'default';
      }
    };

    const getDocumentTypeIcon = (type: string | null) => {
      switch (type) {
        case 'acta': return 'üìã';
        case 'factura': return 'üßæ';
        case 'comunicado': return 'üì¢';
        case 'contrato': return 'üìÑ';
        case 'presupuesto': return 'üí∞';
        default: return 'üìÑ';
      }
    };

    const formatFileSize = (bytes: number) => {
      if (bytes === 0) return '0 Bytes';
      const k = 1024;
      const sizes = ['Bytes', 'KB', 'MB', 'GB'];
      const i = Math.floor(Math.log(bytes) / Math.log(k));
      return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    };

    return (
      <Card className="shadow-md border-t-4 border-t-blue-500">
        <CardHeader className="pb-2">
          <div className="flex justify-between items-start">
            <Link
              href="/documents"
              className="text-sm text-muted-foreground hover:text-blue-500 flex items-center gap-1 mb-4"
            >
              <ArrowLeft className="h-4 w-4" /> 
              <span>Volver a Documentos</span>
            </Link>
          </div>
          
          <div className="flex items-center gap-3 mb-2">
            <FileText className="h-6 w-6 text-blue-500" />
            <T.H2 className="mb-0">{document.filename}</T.H2>
          </div>
          
          <div className="flex items-center gap-3 flex-wrap">
            <div className="flex items-center gap-2">
              <span className="text-lg">{getDocumentTypeIcon(document.document_type)}</span>
              <span className="text-sm text-muted-foreground capitalize">
                {document.document_type || 'Sin clasificar'}
              </span>
            </div>
            {(() => {
              const pipelineStatus = getPipelineStatus();
              return (
                <Badge variant={pipelineStatus.color as any} className="flex items-center gap-1">
                  {getStatusIcon(pipelineStatus.status)}
                  <span>{pipelineStatus.text}</span>
                </Badge>
              );
            })()}
          </div>
        </CardHeader>
        
        <Separator />
        
        <CardContent className="pt-5">
          <div className="space-y-6">
            {/* Pipeline Status */}
            <div className="bg-muted/50 rounded-lg p-4">
              <T.Small className="text-muted-foreground mb-3 block font-medium flex items-center gap-2">
                <Activity className="h-4 w-4" />
                Estado del Pipeline de Procesamiento
              </T.Small>
              <div className="grid grid-cols-2 md:grid-cols-4 gap-3">
                <div className={`text-center p-2 rounded ${document.extraction_status === 'completed' ? 'bg-green-100 text-green-700' : document.extraction_status === 'processing' ? 'bg-yellow-100 text-yellow-700' : 'bg-gray-100 text-gray-600'}`}>
                  <div className="text-xs font-medium">Extracci√≥n</div>
                  <div className="text-lg">{document.extraction_status === 'completed' ? '‚úÖ' : document.extraction_status === 'processing' ? '‚è≥' : '‚è∏Ô∏è'}</div>
                  <div className="text-xs">{document.extraction_status || 'pending'}</div>
                </div>
                {document.processing_level >= 2 && (
                  <div className={`text-center p-2 rounded ${document.classification_status === 'completed' ? 'bg-green-100 text-green-700' : document.classification_status === 'processing' ? 'bg-yellow-100 text-yellow-700' : 'bg-gray-100 text-gray-600'}`}>
                    <div className="text-xs font-medium">Clasificaci√≥n</div>
                    <div className="text-lg">{document.classification_status === 'completed' ? '‚úÖ' : document.classification_status === 'processing' ? '‚è≥' : '‚è∏Ô∏è'}</div>
                    <div className="text-xs">{document.classification_status || 'pending'}</div>
                  </div>
                )}
                {document.processing_level >= 3 && (
                  <div className={`text-center p-2 rounded ${document.metadata_status === 'completed' ? 'bg-green-100 text-green-700' : document.metadata_status === 'processing' ? 'bg-yellow-100 text-yellow-700' : 'bg-gray-100 text-gray-600'}`}>
                    <div className="text-xs font-medium">Metadatos</div>
                    <div className="text-lg">{document.metadata_status === 'completed' ? '‚úÖ' : document.metadata_status === 'processing' ? '‚è≥' : '‚è∏Ô∏è'}</div>
                    <div className="text-xs">{document.metadata_status || 'pending'}</div>
                  </div>
                )}
                {document.processing_level >= 4 && (
                  <div className={`text-center p-2 rounded ${document.chunking_status === 'completed' ? 'bg-green-100 text-green-700' : document.chunking_status === 'processing' ? 'bg-yellow-100 text-yellow-700' : 'bg-gray-100 text-gray-600'}`}>
                    <div className="text-xs font-medium">Chunking</div>
                    <div className="text-lg">{document.chunking_status === 'completed' ? '‚úÖ' : document.chunking_status === 'processing' ? '‚è≥' : '‚è∏Ô∏è'}</div>
                    <div className="text-xs">{document.chunking_status || 'pending'}</div>
                  </div>
                )}
              </div>
              <div className="mt-3 text-center space-y-1">
                <Badge variant="outline" className="text-xs">
                  <BarChart3 className="h-3 w-3 mr-1" />
                  Configurado: {document.processing_level}/4
                </Badge>
                <Badge variant={(() => {
                  const completed = [
                    document.extraction_status === 'completed',
                    document.processing_level >= 2 && document.classification_status === 'completed',
                    document.processing_level >= 3 && document.metadata_status === 'completed', 
                    document.processing_level >= 4 && document.chunking_status === 'completed'
                  ].filter(Boolean).length;
                  return completed === document.processing_level ? 'secondary' : 'destructive';
                })()} className="text-xs">
                  {(() => {
                    const completed = [
                      document.extraction_status === 'completed',
                      document.processing_level >= 2 && document.classification_status === 'completed',
                      document.processing_level >= 3 && document.metadata_status === 'completed', 
                      document.processing_level >= 4 && document.chunking_status === 'completed'
                    ].filter(Boolean).length;
                    return `Completado: ${completed}/${document.processing_level}`;
                  })()}
                </Badge>
              </div>
            </div>

            <Separator />

            {/* Informaci√≥n del Archivo */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <T.Small className="text-muted-foreground mb-2 block">
                  Tama√±o del Archivo
                </T.Small>
                <div className="flex items-center gap-2">
                  <HardDrive className="h-4 w-4 text-muted-foreground" />
                  <T.P className="mb-0">
                    {formatFileSize(document.file_size)}
                  </T.P>
                </div>
              </div>

              <div>
                <T.Small className="text-muted-foreground mb-2 block">
                  Hash del Archivo
                </T.Small>
                <div className="flex items-start gap-2">
                  <Hash className="h-4 w-4 text-muted-foreground mt-0.5" />
                  <T.P className="mb-0 text-xs font-mono break-all">
                    {document.file_hash}
                  </T.P>
                </div>
              </div>
            </div>

            {/* Fechas */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <T.Small className="text-muted-foreground mb-2 block">
                  Fecha de Subida
                </T.Small>
                <div className="flex items-center gap-2">
                  <Calendar className="h-4 w-4 text-muted-foreground" />
                  <T.P className="mb-0">
                    {new Date(document.created_at).toLocaleDateString('es-ES', {
                      day: '2-digit',
                      month: '2-digit',
                      year: 'numeric',
                      hour: '2-digit',
                      minute: '2-digit'
                    })}
                  </T.P>
                </div>
              </div>

              <div>
                <T.Small className="text-muted-foreground mb-2 block">
                  Estado de Procesamiento
                </T.Small>
                {document.processing_completed_at ? (
                  <div className="flex items-center gap-2">
                    <CheckCircle2 className="h-4 w-4 text-green-500" />
                    <div>
                      <T.P className="mb-0 text-green-600 font-medium">‚úÖ Procesamiento Completado</T.P>
                      <T.Small className="text-xs text-muted-foreground">
                        {new Date(document.processing_completed_at).toLocaleDateString('es-ES', {
                          day: '2-digit',
                          month: '2-digit',
                          year: 'numeric',
                          hour: '2-digit',
                          minute: '2-digit'
                        })}
                      </T.Small>
                    </div>
                  </div>
                ) : document.processed_at ? (
                  <div className="flex items-center gap-2">
                    <Clock className="h-4 w-4 text-yellow-500" />
                    <div>
                      <T.P className="mb-0 text-yellow-600 font-medium">‚ö° En Proceso</T.P>
                      <T.Small className="text-xs text-muted-foreground">
                        Iniciado: {new Date(document.processed_at).toLocaleDateString('es-ES')}
                      </T.Small>
                    </div>
                  </div>
                ) : (
                  <div className="flex items-center gap-2">
                    <AlertCircle className="h-4 w-4 text-gray-500" />
                    <T.P className="mb-0 text-gray-500">‚è≥ Pendiente de procesar</T.P>
                  </div>
                )}
              </div>
            </div>

            {/* Metadatos de Gemini IA */}
            {richMetadata && (
              <>
                <Separator />
                <div>
                  <div className="flex items-center justify-between mb-4">
                    <T.H3 className="mb-0">üìä Metadatos Extra√≠dos con IA</T.H3>
                    <div className="flex items-center gap-2">
                      <div className="w-2 h-2 bg-green-500 rounded-full"></div>
                      <T.Small className="text-green-700 font-medium">
                        Gemini IA ‚Ä¢ Confianza: {Math.round((richMetadata.confidence || 0) * 100)}%
                      </T.Small>
                    </div>
                  </div>
                  
                  {(document.document_type === 'acta' || document.filename.toLowerCase().includes('acta')) && (
                    <div className="space-y-6">
                      {/* Technical Info */}
                      <div className="bg-blue-50 border border-blue-200 rounded-lg p-4">
                        <div className="flex items-center gap-2 mb-2">
                          <div className="w-2 h-2 bg-blue-500 rounded-full"></div>
                          <T.Small className="text-blue-700 font-medium">
                            M√©todo: {richMetadata.extraction_method} ‚Ä¢ 
                            Tokens: {richMetadata.tokens_used || 0} ‚Ä¢ 
                            Tiempo: {richMetadata.processing_time_ms || 0}ms ‚Ä¢ 
                            Campos: {Object.keys(richMetadata.metadata || {}).length}
                          </T.Small>
                        </div>
                      </div>

                      {/* üèõÔ∏è INFORMACI√ìN DE LA JUNTA */}
                      <Card>
                        <CardHeader>
                          <T.H4>üèõÔ∏è Informaci√≥n de la Junta</T.H4>
                        </CardHeader>
                        <CardContent>
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            {/* Fecha */}
                            <div className="space-y-1">
                              <T.Small className="text-muted-foreground">Fecha Documento</T.Small>
                              <div className="p-2 bg-muted rounded">
                                <span>{richMetadata.metadata.document_date || richMetadata.metadata.fecha_documento || '‚ùå No encontrado'}</span>
                              </div>
                            </div>
                            
                            {/* Tipo de reuni√≥n */}
                            <div className="space-y-1">
                              <T.Small className="text-muted-foreground">Tipo Junta</T.Small>
                              <div className="p-2 bg-muted rounded">
                                <span>{richMetadata.metadata.tipo_junta || richMetadata.metadata.tipo_reunion || '‚ùå No encontrado'}</span>
                              </div>
                            </div>

                            {/* Lugar */}
                            <div className="space-y-1">
                              <T.Small className="text-muted-foreground">Lugar</T.Small>
                              <div className="p-2 bg-muted rounded">
                                <span>{richMetadata.metadata.lugar || '‚ùå No encontrado'}</span>
                              </div>
                            </div>

                            {/* Comunidad */}
                            <div className="space-y-1">
                              <T.Small className="text-muted-foreground">Comunidad</T.Small>
                              <div className="p-2 bg-muted rounded">
                                <span>{richMetadata.metadata.comunidad_nombre || '‚ùå No encontrado'}</span>
                              </div>
                            </div>
                          </div>
                        </CardContent>
                      </Card>

                      {/* üë• PERSONAS CLAVE */}
                      <Card>
                        <CardHeader>
                          <T.H4>üë• Personas Clave</T.H4>
                        </CardHeader>
                        <CardContent>
                          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <div className="space-y-1">
                              <T.Small className="text-muted-foreground">Presidente Entrante</T.Small>
                              <div className="p-2 bg-muted rounded">
                                <span>{richMetadata.metadata.presidente_entrante || '‚ùå No encontrado'}</span>
                              </div>
                            </div>
                            
                            <div className="space-y-1">
                              <T.Small className="text-muted-foreground">Presidente Saliente</T.Small>
                              <div className="p-2 bg-muted rounded">
                                <span>{richMetadata.metadata.presidente_saliente || '‚ùå No encontrado'}</span>
                              </div>
                            </div>

                            <div className="space-y-1">
                              <T.Small className="text-muted-foreground">Administrador</T.Small>
                              <div className="p-2 bg-muted rounded">
                                <span>{richMetadata.metadata.administrador || '‚ùå No encontrado'}</span>
                              </div>
                            </div>

                            <div className="space-y-1">
                              <T.Small className="text-muted-foreground">Secretario</T.Small>
                              <div className="p-2 bg-muted rounded">
                                <span>{richMetadata.metadata.secretario || richMetadata.metadata.secretario_actual || '‚ùå No encontrado'}</span>
                              </div>
                            </div>
                          </div>
                        </CardContent>
                      </Card>

                      {/* üìä PARTICIPACI√ìN */}
                      <Card>
                        <CardHeader>
                          <T.H4>üìä Participaci√≥n</T.H4>
                        </CardHeader>
                        <CardContent>
                          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                            <div className="space-y-1">
                              <T.Small className="text-muted-foreground">Asistentes</T.Small>
                              <div className="p-2 bg-muted rounded">
                                <span>{richMetadata.metadata.propietarios_asistentes || richMetadata.metadata.asistentes_total || '‚ùå No encontrado'}</span>
                              </div>
                            </div>

                            <div className="space-y-1">
                              <T.Small className="text-muted-foreground">Total Propietarios</T.Small>
                              <div className="p-2 bg-muted rounded">
                                <span>{richMetadata.metadata.propietarios_totales || '‚ùå No encontrado'}</span>
                              </div>
                            </div>

                            <div className="space-y-1">
                              <T.Small className="text-muted-foreground">% Participaci√≥n</T.Small>
                              <div className="p-2 bg-muted rounded">
                                <span>{richMetadata.metadata.cuotas_asistentes || richMetadata.metadata.coeficiente_total || '‚ùå No encontrado'}</span>
                              </div>
                            </div>
                          </div>
                        </CardContent>
                      </Card>

                      {/* üìã CONTENIDO */}
                      <Card>
                        <CardHeader>
                          <T.H4>üìã Contenido</T.H4>
                        </CardHeader>
                        <CardContent className="space-y-4">
                          {/* Orden del d√≠a */}
                          <div className="space-y-2">
                            <T.Small className="text-muted-foreground font-medium">Orden del D√≠a</T.Small>
                            <div className="p-3 bg-muted rounded">
                              {richMetadata.metadata.orden_del_dia && Array.isArray(richMetadata.metadata.orden_del_dia) ? (
                                <ol className="space-y-1 pl-4">
                                  {richMetadata.metadata.orden_del_dia.map((item: string, i: number) => (
                                    <li key={i} className="text-sm">{item}</li>
                                  ))}
                                </ol>
                              ) : (
                                <span className="text-muted-foreground">‚ùå No encontrado</span>
                              )}
                            </div>
                          </div>

                          {/* Acuerdos */}
                          <div className="space-y-2">
                            <T.Small className="text-muted-foreground font-medium">Acuerdos</T.Small>
                            <div className="p-3 bg-muted rounded">
                              {richMetadata.metadata.acuerdos && Array.isArray(richMetadata.metadata.acuerdos) ? (
                                <ul className="space-y-1 pl-4">
                                  {richMetadata.metadata.acuerdos.map((acuerdo: any, i: number) => (
                                    <li key={i} className="text-sm">‚Ä¢ {typeof acuerdo === 'string' ? acuerdo : acuerdo.descripcion || JSON.stringify(acuerdo)}</li>
                                  ))}
                                </ul>
                              ) : (
                                <span className="text-muted-foreground">‚ùå No encontrado</span>
                              )}
                            </div>
                          </div>

                          {/* Topics Keywords */}
                          <div className="space-y-2">
                            <T.Small className="text-muted-foreground font-medium">Temas Detectados</T.Small>
                            <div className="p-3 bg-muted rounded">
                              {richMetadata.metadata.topic_keywords && Array.isArray(richMetadata.metadata.topic_keywords) ? (
                                <div className="flex flex-wrap gap-2">
                                  {richMetadata.metadata.topic_keywords.map((keyword: string, i: number) => (
                                    <Badge key={i} variant="secondary" className="text-xs">
                                      {keyword}
                                    </Badge>
                                  ))}
                                </div>
                              ) : (
                                <span className="text-muted-foreground">‚ùå No encontrado</span>
                              )}
                            </div>
                          </div>
                        </CardContent>
                      </Card>

                      {/* üêõ DEBUG: TODOS LOS CAMPOS */}
                      <Card>
                        <CardHeader>
                          <T.H4>üêõ DEBUG: Todos los Campos Extra√≠dos</T.H4>
                        </CardHeader>
                        <CardContent>
                          <div className="bg-gray-100 p-3 rounded text-xs overflow-auto max-h-60">
                            <pre>{JSON.stringify(richMetadata.metadata, null, 2)}</pre>
                          </div>
                        </CardContent>
                      </Card>
                    </div>
                  )}
                </div>
              </>
            )}

            {/* Fallback: Informaci√≥n b√°sica si no hay metadatos ricos */}
            {!richMetadata && document.extractedData && (
              <>
                <Separator />
                <div>
                  <T.H3 className="mb-4">Informaci√≥n T√©cnica</T.H3>
                  {(document.document_type === 'acta' || document.filename.toLowerCase().includes('acta')) && (
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                        {/* Fecha del documento - Multiple formats support */}
                        {(document.extractedData.document_date || document.extractedData.fecha_documento) && (
                          <div>
                            <T.Small className="text-muted-foreground mb-2 block">
                              Fecha del Documento
                            </T.Small>
                            <div className="flex items-center gap-2">
                              <Calendar className="h-4 w-4 text-muted-foreground" />
                              <T.P className="mb-0">{document.extractedData.document_date || document.extractedData.fecha_documento}</T.P>
                            </div>
                          </div>
                        )}

                        {/* Lugar */}
                        {document.extractedData.lugar && (
                          <div>
                            <T.Small className="text-muted-foreground mb-2 block">
                              Lugar
                            </T.Small>
                            <div className="flex items-center gap-2">
                              <Building2 className="h-4 w-4 text-muted-foreground" />
                              <T.P className="mb-0">{document.extractedData.lugar}</T.P>
                            </div>
                          </div>
                        )}

                        {/* Tipo de reuni√≥n */}
                        {(document.extractedData.meeting_type || document.extractedData.tipo_reunion) && (
                          <div>
                            <T.Small className="text-muted-foreground mb-2 block">
                              Tipo de Junta
                            </T.Small>
                            <Badge variant="outline" className="capitalize">
                              {document.extractedData.meeting_type || document.extractedData.tipo_reunion}
                            </Badge>
                          </div>
                        )}

                        {/* Presidente entrante */}
                        {(document.extractedData.president || document.extractedData.presidente_entrante) && (
                          <div>
                            <T.Small className="text-muted-foreground mb-2 block">
                              Presidente Entrante
                            </T.Small>
                            <div className="flex items-center gap-2">
                              <User className="h-4 w-4 text-green-600" />
                              <T.P className="mb-0">{document.extractedData.president || document.extractedData.presidente_entrante}</T.P>
                            </div>
                          </div>
                        )}

                        {/* Presidente saliente */}
                        {document.extractedData.presidente_saliente && (
                          <div>
                            <T.Small className="text-muted-foreground mb-2 block">
                              Presidente Saliente
                            </T.Small>
                            <div className="flex items-center gap-2">
                              <User className="h-4 w-4 text-orange-600" />
                              <T.P className="mb-0">{document.extractedData.presidente_saliente}</T.P>
                            </div>
                          </div>
                        )}

                        {/* Secretario */}
                        {document.extractedData.secretario_actual && (
                          <div>
                            <T.Small className="text-muted-foreground mb-2 block">
                              Secretario
                            </T.Small>
                            <div className="flex items-center gap-2">
                              <User className="h-4 w-4 text-blue-600" />
                              <T.P className="mb-0">{document.extractedData.secretario_actual}</T.P>
                            </div>
                          </div>
                        )}
                        
                        {/* Administrador */}
                        {document.extractedData.administrator && (
                          <div>
                            <T.Small className="text-muted-foreground mb-2 block">
                              Administrador
                            </T.Small>
                            <div className="flex items-center gap-2">
                              <Building2 className="h-4 w-4 text-muted-foreground" />
                              <T.P className="mb-0">{document.extractedData.administrator}</T.P>
                            </div>
                          </div>
                        )}

                        {/* Asistentes */}
                        {(document.extractedData.attendees_count || document.extractedData.asistentes_total) && (
                          <div>
                            <T.Small className="text-muted-foreground mb-2 block">
                              Asistentes
                            </T.Small>
                            <div className="flex items-center gap-2">
                              <User className="h-4 w-4 text-muted-foreground" />
                              <T.P className="mb-0">{document.extractedData.attendees_count || document.extractedData.asistentes_total} propietarios</T.P>
                            </div>
                          </div>
                        )}

                        {/* Coeficiente de participaci√≥n */}
                        {document.extractedData.coeficiente_total && (
                          <div>
                            <T.Small className="text-muted-foreground mb-2 block">
                              Participaci√≥n
                            </T.Small>
                            <div className="flex items-center gap-2">
                              <BarChart3 className="h-4 w-4 text-green-600" />
                              <T.P className="mb-0">{document.extractedData.coeficiente_total}</T.P>
                            </div>
                          </div>
                        )}

                        {/* P√°ginas y chunks */}
                        {document.page_count && (
                          <div>
                            <T.Small className="text-muted-foreground mb-2 block">
                              P√°ginas
                            </T.Small>
                            <div className="flex items-center gap-2">
                              <FileText className="h-4 w-4 text-muted-foreground" />
                              <T.P className="mb-0">{document.page_count} p√°ginas</T.P>
                            </div>
                          </div>
                        )}

                        {document.chunks_count && (
                          <div>
                            <T.Small className="text-muted-foreground mb-2 block">
                              Fragmentos RAG
                            </T.Small>
                            <div className="flex items-center gap-2">
                              <BarChart3 className="h-4 w-4 text-muted-foreground" />
                              <T.P className="mb-0">{document.chunks_count} chunks</T.P>
                            </div>
                          </div>
                        )}
                      </div>

                      {/* Keywords de temas */}
                      {document.extractedData.topic_keywords && document.extractedData.topic_keywords.length > 0 && (
                        <div>
                          <T.Small className="text-muted-foreground mb-2 block">
                            Temas Detectados
                          </T.Small>
                          <div className="flex flex-wrap gap-2">
                            {document.extractedData.topic_keywords.map((keyword: string, index: number) => (
                              <Badge key={index} variant="secondary" className="text-xs">
                                {keyword}
                              </Badge>
                            ))}
                          </div>
                        </div>
                      )}

                      {/* Decisiones principales */}
                      {document.extractedData.decisiones_principales && document.extractedData.decisiones_principales.length > 0 && (
                        <div>
                          <T.Small className="text-muted-foreground mb-2 block">
                            Decisiones Principales
                          </T.Small>
                          <Card className="bg-muted/50">
                            <CardContent className="pt-3">
                              <ul className="space-y-2">
                                {document.extractedData.decisiones_principales.map((decision: string, index: number) => (
                                  <li key={index} className="text-sm flex items-start gap-2">
                                    <div className="w-1.5 h-1.5 bg-blue-500 rounded-full mt-2 flex-shrink-0"></div>
                                    <span>{decision}</span>
                                  </li>
                                ))}
                              </ul>
                            </CardContent>
                          </Card>
                        </div>
                      )}

                      {/* Estructura detectada */}
                      {document.extractedData.estructura_detectada?.puntos_orden_dia && document.extractedData.estructura_detectada.puntos_orden_dia.length > 0 && (
                        <div>
                          <T.Small className="text-muted-foreground mb-2 block">
                            Orden del D√≠a
                          </T.Small>
                          <Card className="bg-muted/50">
                            <CardContent className="pt-3">
                              <ol className="space-y-2">
                                {document.extractedData.estructura_detectada.puntos_orden_dia.map((punto: string, index: number) => (
                                  <li key={index} className="text-sm flex items-start gap-2">
                                    <span className="font-medium text-blue-600 flex-shrink-0">{index + 1}.</span>
                                    <span>{punto}</span>
                                  </li>
                                ))}
                              </ol>
                            </CardContent>
                          </Card>
                        </div>
                      )}

                      {/* Informaci√≥n t√©cnica */}
                      {document.extractedData.text_length && (
                        <div>
                          <T.Small className="text-muted-foreground mb-2 block">
                            Informaci√≥n T√©cnica
                          </T.Small>
                          <Card className="bg-muted/50">
                            <CardContent className="pt-3">
                              <T.P className="mb-0 text-sm text-muted-foreground">
                                {document.extractedData.text_length.toLocaleString()} caracteres extra√≠dos ‚Ä¢ 
                                Idioma: {document.extractedData.language?.toUpperCase() || 'ES'}
                                {document.extractedData.estructura_detectada?.estructura_formal && 
                                  ` ‚Ä¢ Estructura: ${document.extractedData.estructura_detectada.estructura_formal}`
                                }
                              </T.P>
                            </CardContent>
                          </Card>
                        </div>
                      )}
                    </div>
                  )}

                  {document.document_type === 'factura' && document.extractedData && (
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      {document.extractedData.provider_name && (
                        <div>
                          <T.Small className="text-muted-foreground mb-2 block">
                            Proveedor
                          </T.Small>
                          <div className="flex items-center gap-2">
                            <Building2 className="h-4 w-4 text-muted-foreground" />
                            <T.P className="mb-0">{document.extractedData.provider_name}</T.P>
                          </div>
                        </div>
                      )}
                      
                      {document.extractedData.client_name && (
                        <div>
                          <T.Small className="text-muted-foreground mb-2 block">
                            Cliente
                          </T.Small>
                          <div className="flex items-center gap-2">
                            <User className="h-4 w-4 text-muted-foreground" />
                            <T.P className="mb-0">{document.extractedData.client_name}</T.P>
                          </div>
                        </div>
                      )}
                      
                      {document.extractedData.amount && (
                        <div>
                          <T.Small className="text-muted-foreground mb-2 block">
                            Importe
                          </T.Small>
                          <div className="flex items-center gap-2">
                            <Receipt className="h-4 w-4 text-muted-foreground" />
                            <T.P className="mb-0 font-semibold">
                              {document.extractedData.amount}‚Ç¨
                            </T.P>
                          </div>
                        </div>
                      )}
                      
                      {document.extractedData.invoice_date && (
                        <div>
                          <T.Small className="text-muted-foreground mb-2 block">
                            Fecha de Factura
                          </T.Small>
                          <div className="flex items-center gap-2">
                            <Calendar className="h-4 w-4 text-muted-foreground" />
                            <T.P className="mb-0">
                              {new Date(document.extractedData.invoice_date).toLocaleDateString('es-ES')}
                            </T.P>
                          </div>
                        </div>
                      )}
                      
                      {document.extractedData.category && (
                        <div>
                          <T.Small className="text-muted-foreground mb-2 block">
                            Categor√≠a
                          </T.Small>
                          <Badge variant="outline" className="capitalize">
                            {document.extractedData.category}
                          </Badge>
                        </div>
                      )}
                    </div>
                  )}
                </div>
              </>
            )}
          </div>
        </CardContent>
        
        <CardFooter className="flex justify-between border-t pt-4">
          <Button variant="outline" asChild>
            <Link href="/documents">Volver a Documentos</Link>
          </Button>
          <div className="flex gap-2">
            <Button variant="outline" asChild>
              <Link href={`/api/documents/${document.id}/download?view=inline`} target="_blank">
                <Eye className="h-4 w-4 mr-2" />
                Visualizar
              </Link>
            </Button>
            <Button variant="outline" asChild>
              <Link href={`/api/documents/${document.id}/download`} download>
                <Download className="h-4 w-4 mr-2" />
                Descargar
              </Link>
            </Button>
            <Button variant="outline" asChild>
              <Link href="/documents/upload">
                <FileIcon className="h-4 w-4 mr-2" />
                Subir Otro
              </Link>
            </Button>
          </div>
        </CardFooter>
      </Card>
    );
  } catch (error) {
    return notFound();
  }
}

// Loading skeleton component
function DocumentSkeleton() {
  return (
    <Card className="shadow-md">
      <CardHeader className="pb-2">
        <div className="flex justify-between items-start">
          <Skeleton className="h-6 w-32 mb-4" />
        </div>
        <div className="flex items-center gap-3 mb-2">
          <Skeleton className="h-6 w-6" />
          <Skeleton className="h-8 w-72" />
        </div>
        <div className="flex items-center gap-3">
          <Skeleton className="h-6 w-24" />
          <Skeleton className="h-6 w-20" />
        </div>
      </CardHeader>
      <Separator />
      <CardContent className="pt-5">
        <div className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <Skeleton className="h-4 w-20 mb-2" />
              <Skeleton className="h-6 w-16" />
            </div>
            <div>
              <Skeleton className="h-4 w-24 mb-2" />
              <Skeleton className="h-6 w-full" />
            </div>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <div>
              <Skeleton className="h-4 w-20 mb-2" />
              <Skeleton className="h-6 w-32" />
            </div>
            <div>
              <Skeleton className="h-4 w-24 mb-2" />
              <Skeleton className="h-6 w-32" />
            </div>
          </div>
        </div>
      </CardContent>
      <CardFooter className="flex justify-between border-t pt-4">
        <Skeleton className="h-10 w-40" />
        <div className="flex gap-2">
          <Skeleton className="h-10 w-24" />
        </div>
      </CardFooter>
    </Card>
  );
}

export default async function DocumentPage(props: {
  params: Promise<{
    id: string;
  }>;
}) {
  const params = await props.params;
  const { id } = params;

  return (
    <div className="container mx-auto max-w-4xl py-8">
      <Suspense fallback={<DocumentSkeleton />}>
        <Document documentId={id} />
      </Suspense>
    </div>
  );
}