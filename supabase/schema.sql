-- WARNING: This schema is for context only and is not meant to be run.
-- Table order and constraints may not be valid for execution.

CREATE TABLE public.agents (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  organization_id uuid,
  name text NOT NULL CHECK (length(TRIM(BOTH FROM name)) >= 2 AND length(TRIM(BOTH FROM name)) <= 100),
  purpose text NOT NULL CHECK (length(TRIM(BOTH FROM purpose)) >= 10 AND length(TRIM(BOTH FROM purpose)) <= 500),
  prompt_template text NOT NULL CHECK (length(TRIM(BOTH FROM prompt_template)) >= 20),
  variables jsonb NOT NULL DEFAULT '{}'::jsonb,
  is_active boolean NOT NULL DEFAULT true,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT agents_pkey PRIMARY KEY (id),
  CONSTRAINT agents_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id)
);
CREATE TABLE public.communities (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  name character varying NOT NULL CHECK (char_length(name::text) > 0),
  address text,
  postal_code character varying,
  admin_contact character varying,
  max_units integer DEFAULT 100,
  is_active boolean DEFAULT true,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  description text,
  city character varying,
  country character varying,
  user_id uuid,
  organization_id uuid NOT NULL,
  CONSTRAINT communities_pkey PRIMARY KEY (id),
  CONSTRAINT communities_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT communities_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id)
);
CREATE TABLE public.document_chunks (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  document_id uuid NOT NULL,
  organization_id uuid NOT NULL,
  chunk_number integer NOT NULL CHECK (chunk_number >= 1),
  chunk_type text NOT NULL CHECK (chunk_type = ANY (ARRAY['content'::text, 'header'::text, 'table'::text, 'list'::text, 'conclusion'::text, 'summary'::text])),
  content text NOT NULL CHECK (length(content) > 0),
  content_length integer NOT NULL DEFAULT 0,
  start_position integer CHECK (start_position >= 0),
  end_position integer,
  page_numbers ARRAY,
  chunk_metadata jsonb DEFAULT '{}'::jsonb,
  embedding USER-DEFINED,
  embedding_model text DEFAULT 'text-embedding-ada-002'::text,
  embedding_created_at timestamp with time zone,
  chunking_method text NOT NULL CHECK (chunking_method = ANY (ARRAY['semantic'::text, 'fixed-size'::text, 'paragraph'::text, 'section'::text])),
  confidence real CHECK (confidence >= 0.0::double precision AND confidence <= 1.0::double precision),
  quality_score real CHECK (quality_score >= 0.0::double precision AND quality_score <= 1.0::double precision),
  processing_time_ms integer CHECK (processing_time_ms >= 0),
  tokens_used integer DEFAULT 0,
  input_sample_length integer,
  chunking_config jsonb DEFAULT '{}'::jsonb,
  chunked_by uuid,
  CONSTRAINT document_chunks_pkey PRIMARY KEY (id),
  CONSTRAINT document_chunks_document_id_fkey FOREIGN KEY (document_id) REFERENCES public.documents(id),
  CONSTRAINT document_chunks_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id),
  CONSTRAINT document_chunks_chunked_by_fkey FOREIGN KEY (chunked_by) REFERENCES auth.users(id)
);
CREATE TABLE public.document_classifications (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  document_id uuid NOT NULL,
  organization_id uuid NOT NULL,
  document_type text NOT NULL CHECK (document_type = ANY (ARRAY['acta'::text, 'contrato'::text, 'factura'::text, 'comunicado'::text, 'otros'::text])),
  confidence real NOT NULL CHECK (confidence >= 0.0::double precision AND confidence <= 1.0::double precision),
  classification_method text NOT NULL CHECK (classification_method = ANY (ARRAY['gemini'::text, 'filename-fallback'::text, 'manual'::text, 'legacy-migration'::text])),
  processing_time_ms integer CHECK (processing_time_ms >= 0),
  tokens_used integer DEFAULT 0,
  input_sample_length integer,
  filename_analyzed text,
  raw_response text,
  is_current boolean DEFAULT true,
  superseded_by uuid,
  classified_by uuid,
  CONSTRAINT document_classifications_pkey PRIMARY KEY (id),
  CONSTRAINT document_classifications_document_id_fkey FOREIGN KEY (document_id) REFERENCES public.documents(id),
  CONSTRAINT document_classifications_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id),
  CONSTRAINT document_classifications_superseded_by_fkey FOREIGN KEY (superseded_by) REFERENCES public.document_classifications(id),
  CONSTRAINT document_classifications_classified_by_fkey FOREIGN KEY (classified_by) REFERENCES auth.users(id)
);
CREATE TABLE public.document_metadata (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  document_id uuid NOT NULL,
  organization_id uuid NOT NULL,
  metadata jsonb NOT NULL DEFAULT '{}'::jsonb,
  metadata_version text DEFAULT '1.0'::text,
  confidence real NOT NULL CHECK (confidence >= 0.0::double precision AND confidence <= 1.0::double precision),
  extraction_method text NOT NULL CHECK (extraction_method = ANY (ARRAY['gemini'::text, 'fallback'::text, 'manual'::text])),
  processing_time_ms integer CHECK (processing_time_ms >= 0),
  tokens_used integer DEFAULT 0,
  validation_status text DEFAULT 'valid'::text CHECK (validation_status = ANY (ARRAY['valid'::text, 'warnings'::text, 'invalid'::text])),
  validation_errors ARRAY,
  validation_warnings ARRAY,
  document_type text,
  document_date date,
  topic_keywords ARRAY,
  input_sample_length integer,
  filename_analyzed text,
  raw_response text,
  is_current boolean DEFAULT true,
  superseded_by uuid,
  extracted_by uuid,
  CONSTRAINT document_metadata_pkey PRIMARY KEY (id),
  CONSTRAINT document_metadata_document_id_fkey FOREIGN KEY (document_id) REFERENCES public.documents(id),
  CONSTRAINT document_metadata_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id),
  CONSTRAINT document_metadata_superseded_by_fkey FOREIGN KEY (superseded_by) REFERENCES public.document_metadata(id),
  CONSTRAINT document_metadata_extracted_by_fkey FOREIGN KEY (extracted_by) REFERENCES auth.users(id)
);
CREATE TABLE public.documents (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  organization_id uuid NOT NULL,
  community_id uuid,
  filename text NOT NULL CHECK (length(TRIM(BOTH FROM filename)) >= 1 AND length(TRIM(BOTH FROM filename)) <= 255),
  file_path text NOT NULL CHECK (length(TRIM(BOTH FROM file_path)) >= 1),
  file_size bigint NOT NULL CHECK (file_size > 0),
  file_hash text NOT NULL CHECK (length(TRIM(BOTH FROM file_hash)) >= 32),
  document_type text CHECK (document_type = ANY (ARRAY['acta'::text, 'factura'::text, 'comunicado'::text, 'albaran'::text, 'contrato'::text, 'presupuesto'::text, 'escritura'::text])),
  legacy_status text NOT NULL DEFAULT 'processing'::text CHECK (legacy_status = ANY (ARRAY['processing'::text, 'completed'::text, 'error'::text])),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  processed_at timestamp with time zone,
  extracted_text text,
  text_length integer DEFAULT 0,
  page_count integer DEFAULT 0,
  processing_level integer DEFAULT 1 CHECK (processing_level = ANY (ARRAY[1, 2, 3, 4])),
  processing_config jsonb DEFAULT '{}'::jsonb,
  extraction_status text DEFAULT 'pending'::text CHECK (extraction_status = ANY (ARRAY['pending'::text, 'processing'::text, 'completed'::text, 'failed'::text])),
  extraction_error text,
  extraction_method text CHECK (extraction_method = ANY (ARRAY['pdf-parse'::text, 'pdf-parse-external'::text, 'google-vision-ocr'::text, 'gemini-flash-ocr-ia'::text, 'pdf-parse + google-vision-ocr'::text, 'google-vision-ocr-only'::text])),
  extraction_completed_at timestamp with time zone,
  classification_status text CHECK (classification_status = ANY (ARRAY['pending'::text, 'processing'::text, 'completed'::text, 'failed'::text, 'skipped'::text])),
  classification_error text,
  classification_completed_at timestamp with time zone,
  metadata_status text CHECK (metadata_status = ANY (ARRAY['pending'::text, 'processing'::text, 'completed'::text, 'failed'::text, 'skipped'::text])),
  metadata_error text,
  metadata_completed_at timestamp with time zone,
  chunking_status text CHECK (chunking_status = ANY (ARRAY['pending'::text, 'processing'::text, 'completed'::text, 'failed'::text, 'skipped'::text])),
  chunking_error text,
  chunking_completed_at timestamp with time zone,
  chunks_count integer DEFAULT 0,
  total_processing_time_ms integer DEFAULT 0,
  total_tokens_used integer DEFAULT 0,
  estimated_cost_usd numeric DEFAULT 0.000000,
  processing_started_at timestamp with time zone,
  processing_completed_at timestamp with time zone,
  last_processed_by uuid,
  uploaded_by uuid,
  mime_type text,
  original_filename text,
  CONSTRAINT documents_pkey PRIMARY KEY (id),
  CONSTRAINT documents_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id),
  CONSTRAINT documents_community_id_fkey FOREIGN KEY (community_id) REFERENCES public.communities(id),
  CONSTRAINT documents_last_processed_by_fkey FOREIGN KEY (last_processed_by) REFERENCES auth.users(id),
  CONSTRAINT documents_uploaded_by_fkey FOREIGN KEY (uploaded_by) REFERENCES auth.users(id)
);
CREATE TABLE public.extracted_budgets (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  document_id uuid NOT NULL,
  organization_id uuid NOT NULL,
  numero_presupuesto text,
  emisor_name text,
  cliente_name text,
  fecha_emision date,
  fecha_validez date,
  subtotal numeric,
  impuestos numeric,
  total numeric,
  category text,
  titulo text,
  tipo_documento text,
  emisor_direccion text,
  emisor_telefono text,
  emisor_email text,
  emisor_identificacion_fiscal text,
  cliente_direccion text,
  cliente_identificacion_fiscal text,
  descripcion_servicios jsonb DEFAULT '[]'::jsonb,
  cantidades jsonb DEFAULT '[]'::jsonb,
  precios_unitarios jsonb DEFAULT '[]'::jsonb,
  importes_totales jsonb DEFAULT '[]'::jsonb,
  descripciones_detalladas jsonb DEFAULT '[]'::jsonb,
  porcentaje_impuestos numeric,
  importe_impuestos numeric,
  moneda text DEFAULT 'EUR'::text,
  condiciones_pago text,
  plazos_entrega text,
  pago_inicial_requerido boolean DEFAULT false,
  notas_adicionales text,
  garantia text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT extracted_budgets_pkey PRIMARY KEY (id),
  CONSTRAINT extracted_budgets_document_id_fkey FOREIGN KEY (document_id) REFERENCES public.documents(id),
  CONSTRAINT extracted_budgets_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id)
);
CREATE TABLE public.extracted_communications (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  document_id uuid NOT NULL,
  organization_id uuid NOT NULL,
  fecha date,
  comunidad text,
  remitente text,
  resumen text,
  category text,
  asunto text,
  tipo_comunicado text,
  urgencia text CHECK (urgencia = ANY (ARRAY['baja'::text, 'media'::text, 'alta'::text, 'urgente'::text])),
  comunidad_direccion text,
  remitente_cargo text,
  destinatarios jsonb DEFAULT '[]'::jsonb,
  fecha_limite date,
  categoria_comunicado text,
  requiere_respuesta boolean DEFAULT false,
  accion_requerida jsonb DEFAULT '[]'::jsonb,
  anexos jsonb DEFAULT '[]'::jsonb,
  contacto_info jsonb DEFAULT '{}'::jsonb,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT extracted_communications_pkey PRIMARY KEY (id),
  CONSTRAINT extracted_communications_document_id_fkey FOREIGN KEY (document_id) REFERENCES public.documents(id),
  CONSTRAINT extracted_communications_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id)
);
CREATE TABLE public.extracted_contracts (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  document_id uuid NOT NULL,
  organization_id uuid NOT NULL,
  titulo_contrato text,
  parte_a text,
  parte_b text,
  objeto_contrato text,
  duracion text,
  importe_total numeric,
  fecha_inicio date,
  fecha_fin date,
  category text,
  tipo_contrato text,
  parte_a_direccion text,
  parte_a_identificacion_fiscal text,
  parte_a_representante text,
  parte_b_direccion text,
  parte_b_identificacion_fiscal text,
  parte_b_representante text,
  descripcion_detallada text,
  alcance_servicios jsonb DEFAULT '[]'::jsonb,
  obligaciones_parte_a jsonb DEFAULT '[]'::jsonb,
  obligaciones_parte_b jsonb DEFAULT '[]'::jsonb,
  moneda text DEFAULT 'EUR'::text,
  forma_pago text,
  plazos_pago jsonb DEFAULT '[]'::jsonb,
  penalizaciones text,
  confidencialidad boolean DEFAULT false,
  condiciones_terminacion text,
  legislacion_aplicable text,
  jurisdiccion text,
  fecha_firma date,
  lugar_firma text,
  firmas_presentes boolean DEFAULT false,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT extracted_contracts_pkey PRIMARY KEY (id),
  CONSTRAINT extracted_contracts_document_id_fkey FOREIGN KEY (document_id) REFERENCES public.documents(id),
  CONSTRAINT extracted_contracts_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id)
);
CREATE TABLE public.extracted_delivery_notes (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  document_id uuid NOT NULL,
  organization_id uuid NOT NULL,
  emisor_name text,
  receptor_name text,
  numero_albaran text,
  fecha_emision date,
  numero_pedido text,
  category text,
  emisor_direccion text,
  emisor_telefono text,
  emisor_email text,
  receptor_direccion text,
  receptor_telefono text,
  mercancia jsonb DEFAULT '[]'::jsonb,
  cantidad_total numeric,
  peso_total numeric,
  observaciones text,
  estado_entrega text,
  firma_receptor boolean DEFAULT false,
  transportista text,
  vehiculo_matricula text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT extracted_delivery_notes_pkey PRIMARY KEY (id),
  CONSTRAINT extracted_delivery_notes_document_id_fkey FOREIGN KEY (document_id) REFERENCES public.documents(id),
  CONSTRAINT extracted_delivery_notes_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id)
);
CREATE TABLE public.extracted_invoices (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  document_id uuid NOT NULL,
  organization_id uuid NOT NULL,
  provider_name text CHECK (provider_name IS NULL OR length(TRIM(BOTH FROM provider_name)) <= 255),
  client_name text CHECK (client_name IS NULL OR length(TRIM(BOTH FROM client_name)) <= 255),
  amount numeric CHECK (amount IS NULL OR amount >= 0::numeric),
  invoice_date date,
  category text CHECK (category IS NULL OR length(TRIM(BOTH FROM category)) <= 100),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  invoice_number text,
  issue_date date,
  due_date date,
  subtotal numeric,
  tax_amount numeric,
  total_amount numeric,
  currency text DEFAULT 'EUR'::text,
  payment_method text,
  vendor_address text,
  vendor_tax_id text,
  client_address text,
  client_tax_id text,
  products jsonb DEFAULT '[]'::jsonb,
  payment_terms text,
  notes text,
  vendor_phone text,
  vendor_email text,
  client_phone text,
  client_email text,
  bank_details text,
  CONSTRAINT extracted_invoices_pkey PRIMARY KEY (id),
  CONSTRAINT extracted_invoices_document_id_fkey FOREIGN KEY (document_id) REFERENCES public.documents(id),
  CONSTRAINT extracted_invoices_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id)
);
CREATE TABLE public.extracted_minutes (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  document_id uuid NOT NULL UNIQUE,
  organization_id uuid NOT NULL,
  president_in text CHECK (president_in IS NULL OR length(TRIM(BOTH FROM president_in)) <= 255),
  president_out text CHECK (president_out IS NULL OR length(TRIM(BOTH FROM president_out)) <= 255),
  administrator text CHECK (administrator IS NULL OR length(TRIM(BOTH FROM administrator)) <= 255),
  summary text CHECK (summary IS NULL OR length(TRIM(BOTH FROM summary)) <= 2000),
  decisions text CHECK (decisions IS NULL OR length(TRIM(BOTH FROM decisions)) <= 2000),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  document_date date,
  tipo_reunion text CHECK (tipo_reunion = ANY (ARRAY['ordinaria'::text, 'extraordinaria'::text])),
  lugar text,
  comunidad_nombre text,
  orden_del_dia jsonb DEFAULT '[]'::jsonb,
  acuerdos jsonb DEFAULT '[]'::jsonb,
  topic_keywords ARRAY DEFAULT ARRAY[]::text[],
  topic_presupuesto boolean DEFAULT false,
  topic_mantenimiento boolean DEFAULT false,
  topic_administracion boolean DEFAULT false,
  topic_piscina boolean DEFAULT false,
  topic_jardin boolean DEFAULT false,
  topic_limpieza boolean DEFAULT false,
  topic_balance boolean DEFAULT false,
  topic_paqueteria boolean DEFAULT false,
  topic_energia boolean DEFAULT false,
  topic_normativa boolean DEFAULT false,
  topic_proveedor boolean DEFAULT false,
  topic_dinero boolean DEFAULT false,
  topic_ascensor boolean DEFAULT false,
  topic_incendios boolean DEFAULT false,
  topic_porteria boolean DEFAULT false,
  estructura_detectada jsonb DEFAULT '{}'::jsonb,
  CONSTRAINT extracted_minutes_pkey PRIMARY KEY (id),
  CONSTRAINT extracted_minutes_document_id_fkey FOREIGN KEY (document_id) REFERENCES public.documents(id),
  CONSTRAINT extracted_minutes_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id)
);
CREATE TABLE public.extracted_property_deeds (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  document_id uuid NOT NULL,
  organization_id uuid NOT NULL,
  vendedor_nombre text,
  comprador_nombre text,
  direccion_inmueble text,
  precio_venta numeric,
  fecha_escritura date,
  notario_nombre text,
  referencia_catastral text,
  superficie_m2 numeric,
  category text,
  vendedor_dni text,
  vendedor_direccion text,
  vendedor_estado_civil text,
  vendedor_nacionalidad text,
  vendedor_profesion text,
  comprador_dni text,
  comprador_direccion text,
  comprador_estado_civil text,
  comprador_nacionalidad text,
  comprador_profesion text,
  tipo_inmueble text,
  superficie_util numeric,
  numero_habitaciones integer,
  numero_banos integer,
  planta text,
  orientacion text,
  descripcion_inmueble text,
  registro_propiedad text,
  tomo text,
  libro text,
  folio text,
  finca text,
  inscripcion text,
  moneda text DEFAULT 'EUR'::text,
  forma_pago text,
  precio_en_letras text,
  impuestos_incluidos boolean DEFAULT false,
  gastos_a_cargo_comprador jsonb DEFAULT '[]'::jsonb,
  gastos_a_cargo_vendedor jsonb DEFAULT '[]'::jsonb,
  cargas_existentes jsonb DEFAULT '[]'::jsonb,
  hipotecas_pendientes text,
  servidumbres text,
  libre_cargas boolean DEFAULT true,
  condicion_suspensiva boolean DEFAULT false,
  condiciones_especiales jsonb DEFAULT '[]'::jsonb,
  clausulas_particulares jsonb DEFAULT '[]'::jsonb,
  fecha_entrega date,
  entrega_inmediata boolean DEFAULT false,
  estado_conservacion text,
  inventario_incluido text,
  notario_numero_colegiado text,
  notaria_direccion text,
  protocolo_numero text,
  autorizacion_notarial boolean DEFAULT false,
  valor_catastral numeric,
  coeficiente_participacion text,
  itp_aplicable numeric,
  base_imponible_itp numeric,
  inscripcion_registro text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT extracted_property_deeds_pkey PRIMARY KEY (id),
  CONSTRAINT extracted_property_deeds_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id),
  CONSTRAINT extracted_property_deeds_document_id_fkey FOREIGN KEY (document_id) REFERENCES public.documents(id)
);
CREATE TABLE public.incidents (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  title text NOT NULL CHECK (length(title) > 0),
  description text NOT NULL CHECK (length(description) > 0),
  status text NOT NULL DEFAULT 'abierto'::text CHECK (status = ANY (ARRAY['abierto'::text, 'en_progreso'::text, 'cerrado'::text])),
  priority text NOT NULL DEFAULT 'media'::text CHECK (priority = ANY (ARRAY['baja'::text, 'media'::text, 'alta'::text, 'urgente'::text])),
  community_id uuid NOT NULL,
  reported_by uuid NOT NULL,
  assigned_to uuid,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  resolved_at timestamp with time zone,
  organization_id uuid NOT NULL,
  CONSTRAINT incidents_pkey PRIMARY KEY (id),
  CONSTRAINT incidents_community_id_fkey FOREIGN KEY (community_id) REFERENCES public.communities(id),
  CONSTRAINT incidents_reported_by_fkey FOREIGN KEY (reported_by) REFERENCES auth.users(id),
  CONSTRAINT incidents_assigned_to_fkey FOREIGN KEY (assigned_to) REFERENCES auth.users(id),
  CONSTRAINT incidents_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id)
);
CREATE TABLE public.items (
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  name character varying NOT NULL,
  description character varying NOT NULL,
  CONSTRAINT items_pkey PRIMARY KEY (id)
);
CREATE TABLE public.organizations (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  name text NOT NULL UNIQUE CHECK (length(TRIM(BOTH FROM name)) >= 2 AND length(TRIM(BOTH FROM name)) <= 255),
  description text CHECK (description IS NULL OR length(TRIM(BOTH FROM description)) <= 1000),
  owner_id uuid NOT NULL,
  contact_email text CHECK (contact_email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'::text),
  contact_phone text CHECK (contact_phone IS NULL OR length(TRIM(BOTH FROM contact_phone)) >= 10),
  subscription_plan text NOT NULL DEFAULT 'basic'::text CHECK (subscription_plan = ANY (ARRAY['basic'::text, 'premium'::text, 'enterprise'::text])),
  max_communities integer NOT NULL DEFAULT 5 CHECK (max_communities > 0 AND max_communities <= 1000),
  max_users_per_community integer NOT NULL DEFAULT 500 CHECK (max_users_per_community > 0 AND max_users_per_community <= 10000),
  is_active boolean NOT NULL DEFAULT true,
  timezone text DEFAULT 'UTC'::text,
  locale text DEFAULT 'es-ES'::text,
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  updated_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT organizations_pkey PRIMARY KEY (id),
  CONSTRAINT organizations_owner_id_fkey FOREIGN KEY (owner_id) REFERENCES auth.users(id)
);
CREATE TABLE public.private_items (
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  name character varying NOT NULL,
  description character varying NOT NULL,
  user_id uuid NOT NULL,
  CONSTRAINT private_items_pkey PRIMARY KEY (id),
  CONSTRAINT private_items_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id)
);
CREATE TABLE public.user_roles (
  id uuid NOT NULL DEFAULT uuid_generate_v4(),
  user_id uuid NOT NULL,
  community_id uuid,
  role text NOT NULL CHECK (role = ANY (ARRAY['admin'::text, 'manager'::text, 'resident'::text])),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  organization_id uuid NOT NULL,
  CONSTRAINT user_roles_pkey PRIMARY KEY (id),
  CONSTRAINT user_roles_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id),
  CONSTRAINT user_roles_community_id_fkey FOREIGN KEY (community_id) REFERENCES public.communities(id),
  CONSTRAINT user_roles_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id)
);
CREATE TABLE public.vector_embeddings (
  id uuid NOT NULL DEFAULT gen_random_uuid(),
  document_id uuid NOT NULL,
  organization_id uuid NOT NULL,
  content text NOT NULL CHECK (length(TRIM(BOTH FROM content)) >= 10),
  embedding USER-DEFINED,
  chunk_index integer DEFAULT 0 CHECK (chunk_index >= 0),
  chunk_size integer CHECK (chunk_size IS NULL OR chunk_size > 0),
  created_at timestamp with time zone NOT NULL DEFAULT now(),
  CONSTRAINT vector_embeddings_pkey PRIMARY KEY (id),
  CONSTRAINT vector_embeddings_document_id_fkey FOREIGN KEY (document_id) REFERENCES public.documents(id),
  CONSTRAINT vector_embeddings_organization_id_fkey FOREIGN KEY (organization_id) REFERENCES public.organizations(id)
);