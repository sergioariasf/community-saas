create table public.communities (
  id uuid not null default extensions.uuid_generate_v4 (),
  name character varying(255) not null,
  address text null,
  postal_code character varying(10) null,
  admin_contact character varying(255) null,
  max_units integer null default 100,
  is_active boolean null default true,
  created_at timestamp with time zone null default now(),
  updated_at timestamp with time zone null default now(),
  description text null,
  city character varying(100) null,
  country character varying(100) null,
  user_id uuid null,
  organization_id uuid not null,
  constraint communities_pkey primary key (id),
  constraint communities_organization_id_fkey foreign KEY (organization_id) references organizations (id) on delete CASCADE,
  constraint communities_user_id_fkey foreign KEY (user_id) references auth.users (id),
  constraint communities_name_not_empty check ((char_length((name)::text) > 0))
) TABLESPACE pg_default;

create index IF not exists idx_communities_active on public.communities using btree (is_active) TABLESPACE pg_default;

create index IF not exists idx_communities_postal_code on public.communities using btree (postal_code) TABLESPACE pg_default;

create index IF not exists idx_communities_user_id on public.communities using btree (user_id) TABLESPACE pg_default;

create index IF not exists idx_communities_organization_id on public.communities using btree (organization_id) TABLESPACE pg_default;

create trigger communities_updated_at_trigger BEFORE
update on communities for EACH row
execute FUNCTION update_communities_updated_at ();